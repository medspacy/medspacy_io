[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "medspacy-io"
dynamic = ["version"]
description = "A collection of modules to facilitate reading text from various sources and writing to various sources."
readme = "README.rst"
license = "MIT"
authors = [
    {name = "medSpaCy", email = "medspacy.dev@gmail.com"}
]
maintainers = [
    {name = "medSpaCy", email = "medspacy.dev@gmail.com"}
]
keywords = [
    "medspacy", "reader", "writer", "ehost", "brat", "xmi", "io", 
    "nlp", "annotation", "text processing", "medical nlp"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
requires-python = ">=3.8"
dependencies = [
    "spacy<3.8; python_version < '3.12'",
    "spacy>=3.8,<4.0; python_version >= '3.12'",
    "lxml>=4.4.0",
    "pandas>=0.10.0",
    "quicksectx>=0.3.5",
    "pyrush>=1.0.8",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "black",
    "flake8",
    "mypy",
    "types-lxml",
]
test = [
    "pytest>=6.0",
    "pytest-cov",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
]

[project.urls]
Homepage = "https://github.com/medspacy/medspacy_io"
Repository = "https://github.com/medspacy/medspacy_io"
Documentation = "https://github.com/medspacy/medspacy_io"
"Bug Tracker" = "https://github.com/medspacy/medspacy_io/issues"
Changelog = "https://github.com/medspacy/medspacy_io/releases"

[tool.setuptools]
packages = [
    "medspacy_io",
    "medspacy_io.reader", 
    "medspacy_io.writer", 
    "medspacy_io.consumer", 
    "medspacy_io.vectorizer"
]
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "medspacy_io.version.__version__"}

[tool.setuptools.package-data]
medspacy_io = ["py.typed"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "spacy.*",
    "lxml.*",
    "pandas.*",
    "quicksectx.*",
    "pyrush.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["medspacy_io"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
