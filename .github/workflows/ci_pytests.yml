name: CI Tests

on:
  push:
    branches: [ main, master, develop, dev ]
  pull_request:
    branches: [ main, master, develop, dev ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v5.0.0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Clean up build artifacts
      run: |
        rm -rf build dist *.egg-info
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cat pyproject.toml
        pip install -e .[test]
    
    - name: Run pytest
      run: |
        pytest tests/ -v --tb=short
    
    - name: Run split annotation tests specifically
      run: |
        pytest tests/test_split_annotations.py -v

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5.0.0
    - name: Set up Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: '3.11'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Check with black
      run: |
        black --check --diff medspacy_io tests
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 medspacy_io tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 medspacy_io tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5.0.0
    - name: Set up Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "import medspacy_io; print('Successfully imported medspacy_io')"
